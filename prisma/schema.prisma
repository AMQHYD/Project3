// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       UserProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id               Int                @id @default(autoincrement())
  name             String
  company          String?
  email            String?
  phone            String?
  address          String?
  city             String?
  stateProvince    String?
  postalCode       String?
  country          String?
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  invoices         Invoice[]
  estimates        Estimate[]
  recurringInvoices RecurringInvoice[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  price         Decimal
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  invoiceItems  InvoiceItem[]
  estimateItems EstimateItem[]
}

model Invoice {
  id             Int           @id @default(autoincrement())
  clientId       Int
  client         Client        @relation(fields: [clientId], references: [id])
  invoiceNumber  String
  issueDate      DateTime
  dueDate        DateTime
  subtotal       Decimal?
  totalAmount    Decimal
  notes          String?
  terms          String?
  template       String?
  status         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  items          InvoiceItem[]
}

model InvoiceItem {
  id             Int      @id @default(autoincrement())
  invoiceId      Int
  invoice        Invoice  @relation(fields: [invoiceId], references: [id])
  productId      Int
  product        Product  @relation(fields: [productId], references: [id])
  description    String?
  quantity       Int
  unitPrice      Decimal
  taxPercentage  Decimal?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model RecurringInvoice {
  id                Int      @id @default(autoincrement())
  clientId          Int
  client            Client   @relation(fields: [clientId], references: [id])
  name              String?
  frequency         String
  dayOfMonth        Int?
  startDate         DateTime
  endDate           DateTime?
  limit             Int?
  paymentTerms      String?
  automaticallySend Boolean  @default(false)
  notes             String?
  terms             String?
  template          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Estimate {
  id              Int            @id @default(autoincrement())
  clientId        Int
  client          Client         @relation(fields: [clientId], references: [id])
  estimateNumber  String
  issueDate       DateTime
  expiryDate      DateTime
  subtotal        Decimal?
  totalAmount     Decimal
  notes           String?
  terms           String?
  template        String?
  status          String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  items           EstimateItem[]
}

model EstimateItem {
  id             Int      @id @default(autoincrement())
  estimateId     Int
  estimate       Estimate @relation(fields: [estimateId], references: [id])
  productId      Int
  product        Product  @relation(fields: [productId], references: [id])
  description    String?
  quantity       Int
  unitPrice      Decimal
  taxPercentage  Decimal?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model UserProfile {
  id            Int       @id @default(autoincrement())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  mobile        String?
  address       String?
  businessName  String?
  logo          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
